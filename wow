import React, { useEffect, useState } from 'react';
import { Switch, Route } from 'react-router-dom';
import { initReactI18next } from 'react-i18next';
import Backend from 'i18next-http-backend';
import i18n from 'i18next';
import ChildBenefitsClaim from '../ChildBenefitsClaim/index';
import CookiePage from '../ChildBenefitsClaim/cookiePage/index';
import Accessibility from '../ChildBenefitsClaim/AccessibilityPage';
import UnAuthChildBenefitsClaim from '../UnAuthChildBenefitsClaim';
import HighIncomeCase from '../HighIncomeCase';
import AreYouSureToContinueWithoutSignIn from '../StaticPages/AreYouSureToContinueWithoutSignIn/AreYouSureToContinueWithoutSignIn';
import DoYouWantToSignIn from '../StaticPages/DoYouWantToSignIn/doYouWantToSignIn';
import CheckOnClaim from '../StaticPages/CheckOnClaim';
import RecentlyClaimedChildBenefit from '../StaticPages/ChooseClaimService';
import EducationStart from '../EducationStart';
import setPageTitle from '../../components/helpers/setPageTitleHelpers';
import ChildBenefitHub from '../ChildBenefitHub/ChildBenefitHub';
import ProofOfEntitlement from '../ProofOfEntitlement/ProofOfEntitlement';

const AppSelector = () => {
  const [i18nloaded, seti18nloaded] = useState(false);

  useEffect(() => {
  i18n
    .use(Backend)
    .use(initReactI18next)
    .init({
      lng: sessionStorage.getItem('rsdk_locale')?.substring(0, 2) || 'en',

      backend: {
        loadPath: `assets/i18n/{{lng}}.json`
      },
      fallbackLng: 'en',
      debug: false,
      returnNull: false,
      react: {
        useSuspense: false
      }
    })
    .finally(() => {
      seti18nloaded(true);         
      setPageTitle();
    })
  }, []);

  return !i18nloaded ? null : (
    <Switch>
      <Route exact path='/' component={ChildBenefitsClaim} />
      <Route exact path='/ua' component={UnAuthChildBenefitsClaim} />  

      <Route exact path='/home' component={ChildBenefitHub} />      
      <Route exact path='/view-proof-entitlement' component={ProofOfEntitlement} />

      <Route exact path='/hicbc/opt-in' component={HighIncomeCase} />
      <Route exact path='/education/start' component={EducationStart} />      
      <Route path='/cookies' component={CookiePage} />
      <Route path='/accessibility' component={Accessibility} />
      <Route
        path='/are-you-sure-to-continue-without-sign-in'
        component={AreYouSureToContinueWithoutSignIn}
      />
      <Route path='/sign-in-to-government-gateway' component={DoYouWantToSignIn} />
      <Route path='/check-on-claim' component={CheckOnClaim} />
      <Route path='/recently-claimed-child-benefit' component={RecentlyClaimedChildBenefit} />
    </Switch>
  );
};

export default AppSelector;




const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const LiveReloadPlugin = require('@kooneko/livereload-webpack-plugin');
const CompressionPlugin = require('compression-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const zlib = require('zlib');

module.exports = (env, argv) => {
  const pluginsToAdd = [];
  const webpackMode = argv.mode;

  pluginsToAdd.push(
    new HtmlWebpackPlugin({
      template: './src/index.html',
      filename: 'index.html',
      baseUrl: './'
    })
  );

  pluginsToAdd.push(
    new CopyWebpackPlugin({
      patterns: [
        { from: './sdk-config.json', to: './' },
        { from: './sdk-local-component-map.js', to: './' },
        { from: './node_modules/@pega/auth/lib/oauth-client/authDone.html', to: './auth.html' },
        { from: './node_modules/@pega/auth/lib/oauth-client/authDone.js', to: './' },
        { from: './node_modules/govuk-frontend/dist/govuk/assets/images', to: 'assets/images/' },
        { from: './node_modules/govuk-frontend/dist/govuk/assets/fonts', to: 'assets/fonts/' },
        { from: './assets/icons/*', to: 'constellation/icons/[name].[ext]' },
        { from: './assets/css/*', to: './' },
        { from: './assets/img/*', to: './' },
        { from: './node_modules/tinymce', to: './tinymce' },
        { from: './node_modules/@pega/constellationjs/dist/bootstrap-shell.js', to: './constellation' },
        { from: './node_modules/@pega/constellationjs/dist/bootstrap-shell.*.*', to: 'constellation/[name].[ext]' },
        { from: './node_modules/@pega/constellationjs/dist/lib_asset.json', to: './constellation' },
        { from: './node_modules/@pega/constellationjs/dist/constellation-core.*.*', to: 'constellation/prerequisite/[name].[ext]' },
        { from: './assets/i18n/*', to: './' },
        { from: './assets/lib/*', to: './' }
      ]
    })
  );

  pluginsToAdd.push(
    new MiniCssExtractPlugin({
      filename: 'assets/appStyles.css'
    })
  );

  if (webpackMode === 'production') {
    pluginsToAdd.push(
      new CompressionPlugin({
        filename: '[path][base].gz',
        algorithm: 'gzip',
        test: /\.js$|\.ts$|\.css$|\.html$/,
        exclude: /constellation-core.*.js|bootstrap-shell.js/,
        threshold: 10240,
        minRatio: 0.8
      })
    );
    pluginsToAdd.push(
      new CompressionPlugin({
        filename: '[path][base].br',
        algorithm: 'brotliCompress',
        test: /\.(js|ts|css|html|svg)$/,
        exclude: /constellation-core.*.js|bootstrap-shell.js/,
        compressionOptions: {
          params: {
            [zlib.constants.BROTLI_PARAM_QUALITY]: 11
          }
        },
        threshold: 10240,
        minRatio: 0.8
      })
    );
  }

  let publicPathValue = '';
  if (webpackMode === 'development') {
    const liveReloadOptions = {
      protocol: 'http',
      appendScriptTag: true,
      delay: 1000,
      hostname: 'localhost'
    };
    pluginsToAdd.push(new LiveReloadPlugin(liveReloadOptions));
    publicPathValue = '/';
  }

  const config = {
    mode: 'development',
    entry: {
      default: './src/index.tsx',
      hicbc: './src/index.tsx',
      education: './src/index.tsx'
    },
    devServer: {
      static: path.join(__dirname, 'dist'),
      historyApiFallback: true,
      host: 'localhost',
      port: 3502,
      open: false
    },
    devtool: argv.mode === 'production' ? false : 'inline-source-map',
    plugins: pluginsToAdd,
    output: {
      filename: '[name].bundle.js',
      path: path.resolve(__dirname, 'dist'),
      publicPath: publicPathValue
    },
    module: {
      rules: [
        { test: /\.tsx?$/, use: 'ts-loader', exclude: /node_modules/ },
        { test: /\.jsx?$/, use: 'ts-loader', exclude: /node_modules/ },
        { test: /\.css$/, include: [path.resolve(__dirname, 'src'), path.resolve(__dirname, 'node_modules/react-datepicker'), path.resolve(__dirname, 'node_modules/@pega/react-sdk-components/lib')], use: ['style-loader', 'css-loader'] },
        { test: /\.s[a|c]ss$/, use: [{ loader: MiniCssExtractPlugin.loader }, { loader: 'css-loader' }, { loader: 'sass-loader' }] },
        { test: /\.(png|gif|jpg|cur)$/i, loader: 'url-loader', options: { limit: 8192 } },
        { test: /\.woff2(\?v=[0-9]\.[0-9]\.[0-9])?$/i, loader: 'url-loader', options: { mimetype: 'application/font-woff2' } },
        { test: /\.woff(\?v=[0-9]\.[0-9]\.[0-9])?$/i, loader: 'url-loader', options: { mimetype: 'application/font-woff' } },
        { test: /\.(ttf|eot|svg|otf)(\?v=[0-9]\.[0-9]\.[0-9])?$/i, loader: 'file-loader' },
        { test: /\.(d.ts)$/, loader: 'null-loader' },
        { test: /\.(map)$/, loader: 'null-loader' }
      ]
    },
    resolve: {
      extensions: ['.tsx', '.ts', '.js', '.jsx']
    }
  };

  if (webpackMode === 'development') {
    config.output.publicPath = publicPathValue;
  }

  return config;
};
